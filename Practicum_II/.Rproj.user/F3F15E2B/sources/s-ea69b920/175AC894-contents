---
title: "Practicum II"
output:
  html_document:
    df_print: paged
  html_notebook: default
  pdf_document: default
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}
plot(cars)
```

Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.

When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).

The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.

## Tasks

* (0 pts / 60 min) Inspect and then download IMDB movie data from https://www.imdb.com/interfaces/ (Links to an external site.). Read the descriptions of the data subsets and then download the compressed (gz) tab-separated files (tsv). If you cannot access the link, use this Canvas resource.

* (10 pts) Read the data description and inspect the files, then:

  * (5 pts / 60 min) create a data model in the form of an ERD in Crow's Foot notation using a tool of your choice (e.g., LucidChart, TOAD, MySQL Workbench, etc.) and embed an image of the model in your notebook.  
  
  * [ERD in LucidChart](https://lucid.app/invitations/accept/5f7a9eba-0a39-49bf-b32e-41dba8cf6f64)

  * (4 pts / 15 min) add junction/association tables to normalize many-to-many relationships, normalize multi-valued attributes, and create lookup tables for categorical attribute values. Embed an updated image of the model in your notebook.  
  
  * [ERD in LucidChart in BCNF](https://lucid.app/invitations/accept/537ce00b-b074-48cc-be17-0dbd680d582f)  
  **_Note: not sure if the look up table is correct!_**
  
  * (1 pts / 5 min) add two new attributes (columns) to the appropriate tables: one for the age of a person and one for the number of movies a person has appeared in. Embed an updated image of the model in your notebook. Leave those columns empty for now. They will be filled in later.  
  
  * **Save link as above, but update 'person' table**

  * (2 pts / 10 min) ensure that the relational model is in at least BCNF. 
  
  * **There is no many-to-many relationships and multi-valued attributes in this relational model.**  
  **There is no multi-valued attributes in each table, so it is in 1NF.**  
  **There is no non-key value depending on part of key, so it is in 2NF.**  
  **There is no non-key attribute can decide primary key attribute, so it is in BCNF.**

* (8 pts / 60 min) Create and then run CREATE TABLE statements to build the schema. These statements must run from within your notebook and not from a separate script. Ensure proper referential integrity.

```{R}
# load libraries
library(DBI)
library(odbc)

# connect to mysql
con <- DBI::dbConnect(odbc::odbc(),
                      Driver   = "MySQL",
                      Server   = "cs5200.cerugoc9p5ux.us-east-1.rds.amazonaws.com",
                      Database = "practicum-ii",
                      UID      = "admin",
                      PWD      = "cs5200db",
                      Port     = 3306)
```


```{R}
# CREATE TABLE
dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `movieTitle` (
    `tconst` VARCHAR(15) NOT NULL,
    `titleType` VARCHAR(15) NULL,
    `primaryTitle` VARCHAR(30) NULL,
    `originalTitle` VARCHAR(30) NULL,
    `isAdult` TINYINT NULL,
    `movieTitlecol` VARCHAR(45) NULL,
    `startYear` INT NULL,
    `endYear` INT NULL,
    `runtimeMinutes` INT NULL,
    PRIMARY KEY (`tconst`),
    UNIQUE INDEX `idmovieTitle_UNIQUE` (`tconst` ASC) VISIBLE);
')

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `alternativeMovieTitle` (
    `akas_id` INT NOT NULL,
    `tconst` VARCHAR(15) NULL,
    `ordering` INT NULL,
    `title` VARCHAR(30) NULL,
    `region` VARCHAR(30) NULL,
    `attributes` VARCHAR(100) NULL,
    `isOriginalTitle` TINYINT NULL,
    PRIMARY KEY (`akas_id`),
    UNIQUE INDEX `akas_id_UNIQUE` (`akas_id` ASC) VISIBLE,
    INDEX `tconst_idx` (`tconst` ASC) VISIBLE,
    CONSTRAINT `tconst`
      FOREIGN KEY (`tconst`)
      REFERENCES `mydb`.`movieTitle` (`tconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
')
  
dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `person` (
    `nconst` VARCHAR(15) NOT NULL,
    `primaryName` VARCHAR(45) NULL,
    `birthYear` INT NULL,
    `deathYear` INT NULL,
    `age` INT NULL,
    `numOfMoviesAppeared` INT NULL,
    PRIMARY KEY (`nconst`),
    UNIQUE INDEX `nconst_UNIQUE` (`nconst` ASC) VISIBLE);
')

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `principalCrew` (
    `crew_id` INT NOT NULL,
    `tconst` VARCHAR(15) NULL,
    `ordering` INT NULL,
    `nconst` VARCHAR(15) NULL,
    `category` VARCHAR(45) NULL,
    `job` VARCHAR(45) NULL,
    `characters` VARCHAR(45) NULL,
    PRIMARY KEY (`crew_id`),
    UNIQUE INDEX `crew_id_UNIQUE` (`crew_id` ASC) VISIBLE,
    INDEX `tconst_idx` (`tconst` ASC) VISIBLE,
    INDEX `nconst _idx` (`nconst` ASC) VISIBLE,
    CONSTRAINT `tconst`
      FOREIGN KEY (`tconst`)
      REFERENCES `mydb`.`movieTitle` (`tconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT,
    CONSTRAINT `nconst `
      FOREIGN KEY (`nconst`)
      REFERENCES `mydb`.`person` (`nconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
')  

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `episode` (
    `tconst` VARCHAR(15) NOT NULL,
    `parentTconst` VARCHAR(15) NULL,
    `seasonNumber` INT NULL,
    `episodeNumber` INT NULL,
    PRIMARY KEY (`tconst`),
    UNIQUE INDEX `tconst_UNIQUE` (`tconst` ASC) VISIBLE,
    CONSTRAINT `tconst`
      FOREIGN KEY (`tconst`)
      REFERENCES `mydb`.`movieTitle` (`tconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
')    

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `rating` (
    `tconst` VARCHAR(15) NOT NULL,
    `averageRating` FLOAT NULL,
    `numVotes` INT NULL,
    UNIQUE INDEX `tconst_UNIQUE` (`tconst` ASC) VISIBLE,
    PRIMARY KEY (`tconst`),
    CONSTRAINT `tconst`
      FOREIGN KEY (`tconst`)
      REFERENCES `mydb`.`movieTitle` (`tconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
')    

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `genre` (
    `tconst` VARCHAR(15) NOT NULL,
    `genreType` VARCHAR(45) NOT NULL,
    PRIMARY KEY (`tconst`, `genreType`),
    UNIQUE INDEX `tconst_UNIQUE` (`tconst` ASC) VISIBLE,
    UNIQUE INDEX `genreType_UNIQUE` (`genreType` ASC) VISIBLE,
    CONSTRAINT `tconst`
      FOREIGN KEY (`tconst`)
      REFERENCES `mydb`.`movieTitle` (`tconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
')  

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `movieType` (
    `movieType` VARCHAR(20) NOT NULL,
    `akas_id` INT NOT NULL,
    PRIMARY KEY (`movieType`, `akas_id`),
    UNIQUE INDEX `movieType_UNIQUE` (`movieType` ASC) VISIBLE,
    UNIQUE INDEX `akas_id_UNIQUE` (`akas_id` ASC) VISIBLE,
    CONSTRAINT `akas_id`
      FOREIGN KEY (`akas_id`)
      REFERENCES `mydb`.`alternativeMovieTitle` (`akas_id`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
 ') 
   
dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `director` (
    `director_id` INT NOT NULL,
    `nconst` VARCHAR(15) NOT NULL,
    UNIQUE INDEX `director_id_UNIQUE` (`director_id` ASC) VISIBLE,
    PRIMARY KEY (director_id),
    CONSTRAINT `nconst`
      FOREIGN KEY (`nconst`)
      REFERENCES `mydb`.`person` (`nconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT;
')

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `directorWithMovie` (
    `tconst` VARCHAR(15) NOT NULL,
    `director_id` INT NOT NULL,
    PRIMARY KEY (`tconst`, `director_id`),
    UNIQUE INDEX `directorWithMoviecol_UNIQUE` (`director_id` ASC) VISIBLE,
    UNIQUE INDEX `tconst_UNIQUE` (`tconst` ASC) VISIBLE,
    CONSTRAINT `tconst`
      FOREIGN KEY (`tconst`)
      REFERENCES `mydb`.`movieTitle` (`tconst`)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
    CONSTRAINT `director_id`
      FOREIGN KEY (`director_id`)
      REFERENCES `mydb`.`director` (`director_id`)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);
')

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `writer` (
    `writer_id` INT NOT NULL,
    `nconst` VARCHAR(15) NOT NULL,
    PRIMARY KEY (`writer_id`),
    UNIQUE INDEX `writer_id_UNIQUE` (`writer_id` ASC) VISIBLE,
    CONSTRAINT `nconst`
      FOREIGN KEY (`nconst`)
      REFERENCES `mydb`.`person` (`nconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
')    

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `writerWithMovie` (
    `tconst` VARCHAR(15) NOT NULL,
    `writer_id` INT NOT NULL,
    UNIQUE INDEX `tconst_UNIQUE` (`tconst` ASC) VISIBLE,
    PRIMARY KEY (`tconst`, `writer_id`),
    UNIQUE INDEX `writer_id_UNIQUE` (`writer_id` ASC) VISIBLE,
    CONSTRAINT `tconst`
      FOREIGN KEY (`tconst`)
      REFERENCES `mydb`.`movieTitle` (`tconst`)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
    CONSTRAINT `writer_id`
      FOREIGN KEY (`writer_id`)
      REFERENCES `mydb`.`writer` (`writer_id`)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);
')

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `personKnownForMovies` (
    `nconst` VARCHAR(15) NOT NULL,
    `tconst` VARCHAR(15) NOT NULL,
    PRIMARY KEY (`nconst`, `tconst`),
    UNIQUE INDEX `nconst_UNIQUE` (`nconst` ASC) VISIBLE,
    UNIQUE INDEX `tconst_UNIQUE` (`tconst` ASC) VISIBLE,
    CONSTRAINT `tconst`
      FOREIGN KEY (`tconst`)
      REFERENCES `mydb`.`movieTitle` (`tconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT,
    CONSTRAINT `nconst`
      FOREIGN KEY (`nconst`)
      REFERENCES `mydb`.`person` (`nconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
')

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `primaryProfession` (
    `profession_id` INT NOT NULL,
    `type` VARCHAR(45) NULL,
    PRIMARY KEY (`profession_id`),
    UNIQUE INDEX `profession_id_UNIQUE` (`profession_id` ASC) VISIBLE);
')  

dbSendQuery(con, '
  CREATE TABLE IF NOT EXISTS `primaryProfession` (
    `nconst` VARCHAR(15) NOT NULL,
    `professionType` VARCHAR(45) NOT NULL,
    PRIMARY KEY (`nconst`, professionType),
    CONSTRAINT `nconst`
      FOREIGN KEY (`nconst`)
      REFERENCES `mydb`.`person` (`nconst`)
      ON DELETE RESTRICT
      ON UPDATE RESTRICT);
') 

```


* (10 pts / 120 min) Load the table from the downloaded data files into the tables. Properly parse the foreign keys and attributes and ensure that the data is in the right tables in the right form and that referential integrity is ensured. This will require parsing code in your chosen programming language. You should create a subset of each dataset for testing (as the data sets are very large and take significant time to load). What is the effect of the referential integrity checking while you load? Can you do something about that? Describe and implement any improvement strategies.

```{R}
# load libraries
library(data.table)
library(R.utils)
library(tidyr)
library(dplyr)

# load data
ratings <- fread(file = 'data/title.ratings.tsv.gz', header = TRUE)
dbWriteTable(con, "rating", ratins, overwrite=TRUE)

crews <- fread(file = 'data/title.crew.tsv.gz', header = TRUE, nrows=200)

directors <- fread(file = 'data/title.crew.tsv.gz', header = TRUE, nrows=200, select=c('tconst', 'directors'))

directors <- fread(file = 'data/title.crew.tsv.gz', header = TRUE, nrows=200, select=c('tconst', 'directors')) %>% separate_rows(directors)
writers <- fread(file = 'data/title.crew.tsv.gz', header = TRUE, nrows=200, select=c('tconst', 'writers')) %>% separate_rows(writers)

directors <- fread(file = 'data/title.crew.tsv.gz', header = TRUE, nrows=200, select=c('tconst', 'directors'), na.strings='\\N')

directors <- fread(file = 'data/title.crew.tsv.gz', header = TRUE, nrows=200, select=c('tconst', 'directors'), na.strings='\\N')
```

* (5 pts / 30 min) After loading the data, execute UPDATE statements for the two newly created columns in (2C). You may interpret what appearing in movies means and what you classify as movies -- just make it clear in your notebook.

* (10 pts / 90 min) Add triggers to the appropriate tables so that the newly created columns in (2C) are automatically updated when new data in inserted.
```{R}

dbSendQuery('
  DELIMITER $$

  CREATE DEFINER = CURRENT_USER TRIGGER person_AFTER_INSERT
  AFTER INSERT ON person FOR EACH ROW
  BEGIN
      SET NEW.age = YEAR(CURDATE()) - NEW.birthYear;
    
      SELECT tconst, COUNT(*) INTO NEW.numOfMoviesAppeared
      FROM principalCrew 
      WHERE principalCrew.nconst = NEW.nconst
      GROUP BY principalCrew.nconst;
  END $$

  DELIMITER ;
')

```

* (8 pts / 60 min) Create a view that lists the name of each actor, their age, whether they are dead or not, and how many movies they are known for.
```{R}
# First, create a view containing number of movies a person known for
dbSendQuery(con, '
  CREATE VIEW personKnownForMovie AS
  SELECT nconst, tconst, COUNT(*) AS numOfMoviesKnownFor
  FROM knownForMovie
  GROUP BY nconst;
')

# Second, create a table containing isDead attribute
dbSendQuery(con, '
  CREATE TABLE death (
  nconst VARCHAR(15),
  deadYear INT,
  isDead TINYINT);
')

# Third, create a trriger to set isDead value according to deadYear
dbSendQuery(con, '
  DELIMITER $$

  CREATE DEFINER = CURRENT_USER TRIGGER "death_after_insert"
  AFTER INSERT ON "death" FOR EACH ROW
  BEGIN
      IF(NEW.deadYear = "\N") THEN
          SET NEW.isDead = 0;
      ELSE
          SET NEW.isDead = 1;
      END IF;
  END $$
  
  DELIMITER ;
')

# Finally, create a view containing name, age, isDead, numOfMoviesKnownFor
dbSendQuery(con, '
  CREATE VIEW "actor" AS 
  SELECT person.primaryName,
       person.age,
       death.isDead,
       personKnownForMovie.numOfMoviesKnownFor
  FROM "person"
  INNER JOIN death
  ON person.nconst = death.nconst
  INNER JOIN "personKnownForMovie" 
  ON person.nconst = personKnownForMovie.nconst
  INNER JOIN "principalCrew"
  ON person.nconst = principalCrew.nconst 
  AND principalCrew.category = "actor";
')

# construct a SQL query
sqlCmd = "SELECT * FROM actor"

# send the SQL query to the database
rs = dbGetQuery(con, sqlCmd)

# extract records
dbFetch(rs)

# finish fetching the records
dbClearResult(rs)

```

* (9 pts / 90 min) Write a query that finds the number of seasons for each TV series. Using the results of the query create a histogram (frequency plot).

```{R}
# load libraries
library(ggplot2)

# build query
query <- dbSendQuery(con, "SELECT 
  CASE WHEN (DATE_FORMAT(NOW(), '%Y') - DATE_FORMAT(DOB, '%Y') - (DATE_FORMAT(NOW(), '00-%m-%d') < DATE_FORMAT(DOB, '00-%m-%d'))) < 20 THEN '<20'
     WHEN (DATE_FORMAT(NOW(), '%Y') - DATE_FORMAT(DOB, '%Y') - (DATE_FORMAT(NOW(), '00-%m-%d') < DATE_FORMAT(DOB, '00-%m-%d'))) < 30 THEN '20-29'
     WHEN (DATE_FORMAT(NOW(), '%Y') - DATE_FORMAT(DOB, '%Y') - (DATE_FORMAT(NOW(), '00-%m-%d') < DATE_FORMAT(DOB, '00-%m-%d'))) < 40 THEN '30-39'
     WHEN (DATE_FORMAT(NOW(), '%Y') - DATE_FORMAT(DOB, '%Y') - (DATE_FORMAT(NOW(), '00-%m-%d') < DATE_FORMAT(DOB, '00-%m-%d'))) < 50 THEN '40-49'
     WHEN (DATE_FORMAT(NOW(), '%Y') - DATE_FORMAT(DOB, '%Y') - (DATE_FORMAT(NOW(), '00-%m-%d') < DATE_FORMAT(DOB, '00-%m-%d'))) < 60 THEN '50-59'
     ELSE '>60' END AS age,
     COUNT(PersonId) persons
FROM Person
GROUP BY age
ORDER BY FIELD(age, '<20', '20-29', '30-39', '40-49', '50-59', '>60')")

# fetch data
df <- dbFetch(query)

# lock the order
df$age <- factor(df$age, levels = df$age)

# plot
ggplot(df, aes(x=age, y=persons)) +
  geom_col(data=df) +
  scale_y_continuous(limits=c(0,20))
```


* (10 pts / 120 min) Build a function in your code or a stored procedure in the database (approach is your choice) called addActor() that adds a new actor to the database: this requires updating several tables, so the insertions must occur within a transaction in order to function properly in a concurrent environment. Test your function by inserting a new actor -- you may make up a name and associated information. Show evidence in your notebook that the actor was properly inserted.




* (5 pts / 60 min) Build a function in your code or a stored procedure in the database (approach is your choice) called deleteActor() that removes an actor from the database: this requires updating several tables, so the deletions must occur within a transaction in order to function properly in a concurrent environment. Test your function by deleting a new actor inserted in (9) -- show evidence that the removal was successful.




* (10 pts / 45 min) Write a query to retrieve the names and ages of all actors who appeared in more than two movies (but not TV series) which an above average rating. Show the results of the query in your notebook.




* (5 pts / 90 min) Write a query that finds an actor by name (pick a name). Measure the execution time of the query. Then create an index that would improve the performance of the query and then run and measure it again. Show the difference in a bar chart and comment on why that's the case.







* (5 pts / 90 min) Add several indexes to a table of your choice (one containing lots of rows) and then insert additional rows into the table. Provide measurements of insert performance with no additional index, one, two, three, etc. Plot the performance change in a line graph and comment on the difference.

```{r}
# install package

install.packages("devtools", dependencies = TRUE)
library(devtools)
devtools::install_github("olafmersmann/microbenchmarkCore")
devtools::install_github("olafmersmann/microbenchmark")
```

```{r}
library(microbenchmark)

mbm = microbenchmark(
  withZeroIndex = dbSendQuery(con,'
  INSERT INTO "movieTitle" ("tconst", "titleType", "primaryTitle",
  "originalTitle", "isAdult", "startYear", "runtimeMinutes")
  VALUES ("tt9916990", "short", "Tomorrow", "See you again", 0, 1990, 5);
'),
  dbSendQuery(con, '
  CREATE INDEX "index_primaryTitle"
  ON "movieTitle" ("primaryTitle");
'),
  withOneIndex = dbSendQuery(con,'
  INSERT INTO "movieTitle" ("tconst", "titleType", "primaryTitle",
  "originalTitle", "isAdult", "startYear", "runtimeMinutes")
  VALUES ("tt9916991", "short", "Long River", "Paris", 0, 1995, 3);
'),
  dbSendQuery(con, '
  CREATE INDEX "index_originalTitle"
  ON "movieTitle" ("originalTitle");
'),
  withTwoIndex = dbSendQuery(con,'
  INSERT INTO "movieTitle" ("tconst", "titleType", "primaryTitle",
  "originalTitle", "isAdult", "startYear", "runtimeMinutes")
  VALUES ("tt9916992", "short", "Sunshine", "Sunshine", 0, 2001, 5);
'),
  dbSendQuery(con, '
  CREATE INDEX "index_startYear"
  ON "movieTitle" ("startYear");
'),
  withThreeIndex = dbSendQuery(con,'
  INSERT INTO "movieTitle" ("tconst", "titleType", "primaryTitle",
  "originalTitle", "isAdult", "startYear", "runtimeMinutes")
  VALUES ("tt9916993", "short", "Youngh", "Be your side", 0, 2002, 1);
'),
  times=50
)
mbm

# plotting microbenchmark results

library(ggplot2)
autoplot(mbm)

```

* (5 pts / ongoing) Proper documentation and clean code that is easy to follow. Professional preparation of the work.
